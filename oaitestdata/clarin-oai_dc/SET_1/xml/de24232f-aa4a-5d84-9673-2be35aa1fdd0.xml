<record xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <header>
    <identifier>oai:lindat.mff.cuni.cz:11234/1-2380</identifier>
    <datestamp>2018-07-02T22:05:50Z</datestamp>
    <setSpec>hdl_11858_00-097C-0000-0001-486F-D</setSpec>
    <setSpec>hdl_11858_00-097C-0000-0001-4877-A</setSpec>
  </header>
  <metadata>
    <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:doc="http://www.lyncode.com/xoai" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
      <dc:title>EFCL Channelizer</dc:title>
      <dc:creator>Klus&#225;&#269;ek, David</dc:creator>
      <dc:subject>Fast Channelizer</dc:subject>
      <dc:subject>Filterbank</dc:subject>
      <dc:subject>ASR Front End</dc:subject>
      <dc:subject>Software   Defined Radio</dc:subject>
      <dc:subject>Polyphase Filter</dc:subject>
      <dc:subject>Frequency Multiplexing</dc:subject>
      <dc:subject>Audio Denoising</dc:subject>
      <dc:subject>High Performance Computing</dc:subject>
      <dc:subject>HPC</dc:subject>
      <dc:subject>SDR</dc:subject>
      <dc:subject>FFT</dc:subject>
      <dc:subject>FFTW</dc:subject>
      <dc:subject>SIMD</dc:subject>
      <dc:subject>AVX</dc:subject>
      <dc:subject>SSE</dc:subject>
      <dc:subject>NEON</dc:subject>
      <dc:description>Extremely fast digital audio channelizer implementation, usable as a building block for experimental ASR front-ends or signal denoising applications. Also applicable in software defined radios, due to its high throughput. It comes in a form of a C/C++ library and an executable example program which reads input stream, splitting it into equidistant frequency channels, emitting their data to the output.&#13;
&#13;
Features:&#13;
&#13;
(1) Hand tuned SIMD-aware assembly for x86 (SSE) and IA64 (AVX) as well as for ARM (NEON) processors.&#13;
(2) Generic non-SIMD C++ implementation for other architectures.&#13;
(3) Capable of taking advantage of multicore CPUs.&#13;
(4) Fully configurable number of channels and the output decimation rate.&#13;
(5) User supplied FIR of the channel separation filter, which allows to specify the width of the channels, whether they should overlap or be separated.&#13;
(6) Input and output signal samples are treated as complex numbers.&#13;
(7) Speed over 750 complex MS/s achieved on Core i7 4710HQ @ 2.5GHz, when channelizing into 72 output channels with a FIR length of 1152 samples, using 3 computing threads.&#13;
(8) Runs under Linux OS.</dc:description>
      <dc:date>2017-01-10</dc:date>
      <dc:type>toolService</dc:type>
      <dc:identifier>http://hdl.handle.net/11234/1-2380</dc:identifier>
      <dc:rights>Mozilla Public License 2.0</dc:rights>
      <dc:rights>http://opensource.org/licenses/MPL-2.0</dc:rights>
      <dc:rights>PUB</dc:rights>
      <dc:format>application/octet-stream</dc:format>
      <dc:format>text/html</dc:format>
      <dc:format>text/plain; charset=utf-8</dc:format>
      <dc:format>downloadable_files_count: 2</dc:format>
      <dc:publisher>Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics (UFAL)</dc:publisher>
      <dc:source>http://atrey.karlin.mff.cuni.cz/~klusacek/EFCL.html</dc:source>
    </oai_dc:dc>
  </metadata>
</record>
