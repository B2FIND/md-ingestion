{
    "Contact": [
        "Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics (UFAL)"
    ],
    "DiscHierarchy": [
        "1.4",
        "Humanities",
        "Linguistics"
    ],
    "Discipline": "Linguistics",
    "Format": [
        "text/plain; charset=utf-8",
        "downloadable_files_count: 2",
        "text/html",
        "application/octet-stream"
    ],
    "MetaDataAccess": "https://clarin-pl.eu/oai/request?verb=GetRecord&metadataPrefix=oai_dc&identifier=oai:lindat.mff.cuni.cz:11234/1-2380",
    "MetadataAccess": [
        "oai:lindat.mff.cuni.cz:11234/1-2380"
    ],
    "PID": "http://hdl.handle.net/11234/1-2380",
    "PublicationTimestamp": "2017-01-10T11:59:59Z",
    "PublicationYear": [
        "2017"
    ],
    "Publisher": [
        "Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics (UFAL)"
    ],
    "ResourceType": [
        "toolService"
    ],
    "Rights": [
        "Mozilla Public License 2.0",
        "http://opensource.org/licenses/MPL-2.0",
        "PUB"
    ],
    "author": [
        "Klus\u00e1\u010dek, David"
    ],
    "fulltext": "oai:lindat.mff.cuni.cz:11234/1-2380;2018-07-02T22:05:50Z;hdl_11858_00-097C-0000-0001-486F-D;hdl_11858_00-097C-0000-0001-4877-A;EFCL Channelizer;Klus\u00e1\u010dek, David;Fast Channelizer;Filterbank;ASR Front End;Software   Defined Radio;Polyphase Filter;Frequency Multiplexing;Audio Denoising;High Performance Computing;HPC;SDR;FFT;FFTW;SIMD;AVX;SSE;NEON;Extremely fast digital audio channelizer implementation, usable as a building block for experimental ASR front-ends or signal denoising applications. Also applicable in software defined radios, due to its high throughput. It comes in a form of a C/C++ library and an executable example program which reads input stream, splitting it into equidistant frequency channels, emitting their data to the output.\r\n\r\nFeatures:\r\n\r\n(1) Hand tuned SIMD-aware assembly for x86 (SSE) and IA64 (AVX) as well as for ARM (NEON) processors.\r\n(2) Generic non-SIMD C++ implementation for other architectures.\r\n(3) Capable of taking advantage of multicore CPUs.\r\n(4) Fully configurable number of channels and the output decimation rate.\r\n(5) User supplied FIR of the channel separation filter, which allows to specify the width of the channels, whether they should overlap or be separated.\r\n(6) Input and output signal samples are treated as complex numbers.\r\n(7) Speed over 750 complex MS/s achieved on Core i7 4710HQ @ 2.5GHz, when channelizing into 72 output channels with a FIR length of 1152 samples, using 3 computing threads.\r\n(8) Runs under Linux OS.;2017-01-10;toolService;http://hdl.handle.net/11234/1-2380;Mozilla Public License 2.0;http://opensource.org/licenses/MPL-2.0;PUB;application/octet-stream;text/html;text/plain; charset=utf-8;downloadable_files_count: 2;Charles University, Faculty of Mathematics and Physics, Institute of Formal and Applied Linguistics (UFAL);http://atrey.karlin.mff.cuni.cz/~klusacek/EFCL.html",
    "group": "clarin",
    "groups": [
        {
            "name": "clarin"
        }
    ],
    "name": "de24232f-aa4a-5d84-9673-2be35aa1fdd0",
    "notes": [
        "Extremely fast digital audio channelizer implementation, usable as a building block for experimental ASR front-ends or signal denoising applications. Also applicable in software defined radios, due to its high throughput. It comes in a form of a C/C++ library and an executable example program which reads input stream, splitting it into equidistant frequency channels, emitting their data to the output.\r\n\r\nFeatures:\r\n\r\n(1) Hand tuned SIMD-aware assembly for x86 (SSE) and IA64 (AVX) as well as for ARM (NEON) processors.\r\n(2) Generic non-SIMD C++ implementation for other architectures.\r\n(3) Capable of taking advantage of multicore CPUs.\r\n(4) Fully configurable number of channels and the output decimation rate.\r\n(5) User supplied FIR of the channel separation filter, which allows to specify the width of the channels, whether they should overlap or be separated.\r\n(6) Input and output signal samples are treated as complex numbers.\r\n(7) Speed over 750 complex MS/s achieved on Core i7 4710HQ @ 2.5GHz, when channelizing into 72 output channels with a FIR length of 1152 samples, using 3 computing threads.\r\n(8) Runs under Linux OS."
    ],
    "oai_identifier": [
        "oai:lindat.mff.cuni.cz:11234/1-2380"
    ],
    "oai_set": [
        "hdl_11858_00-097C-0000-0001-486F-D",
        "hdl_11858_00-097C-0000-0001-4877-A"
    ],
    "state": "active",
    "tags": [
        {
            "name": "Fast Channelizer"
        },
        {
            "name": "Filterbank"
        },
        {
            "name": "ASR Front End"
        },
        {
            "name": "Software Defined Radio"
        },
        {
            "name": "Polyphase Filter"
        },
        {
            "name": "Frequency Multiplexing"
        },
        {
            "name": "Audio Denoising"
        },
        {
            "name": "High Performance Computing"
        },
        {
            "name": "HPC"
        },
        {
            "name": "SDR"
        },
        {
            "name": "FFT"
        },
        {
            "name": "FFTW"
        }
    ],
    "title": [
        "EFCL Channelizer"
    ],
    "url": ""
}